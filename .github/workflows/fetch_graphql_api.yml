name: Classify and Patch Vulnerable Dependencies
on:
  workflow_dispatch:
jobs:
  classify-and-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Fetch Vulnerabilities
        id: fetch_vulnerabilities
        env:
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          QUERY=$(cat <<'EOF'
          {
            "query": "query ($org: String = \"\", $repo: String! = \"\") { organization(login: $org) { repository(name: $repo) { name vulnerabilityAlerts(first: 100, states: OPEN) { nodes { dependencyRelationship dependencyScope vulnerableManifestPath securityVulnerability { advisory { ghsaId summary } severity package { name ecosystem } firstPatchedVersion { identifier } vulnerableVersionRange } } } } } }",
            "variables": {
              "org": "${{ github.repository_owner }}",
              "repo": "${{ github.event.repository.name }}"
            }
          }
          EOF
          )
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$QUERY" \
            https://api.github.com/graphql)
          echo "$RESPONSE" > vulnerabilities.json
          echo "VULNERABILITIES=$(echo "$RESPONSE" | jq -c '.data.organization.repository.vulnerabilityAlerts.nodes[]')" >> $GITHUB_ENV
      - name: Classify Vulnerable Dependencies
        id: classify_dependencies
        run: |
          gradle dependencies > gradle_dependencies.txt
          gradle buildEnvironment > gradle_build_env.txt
          echo "${VULNERABILITIES}" | while read -r vulnerability; do
            PACKAGE=$(echo "$vulnerability" | jq -r '.securityVulnerability.package.name')
            if grep -q "$PACKAGE" gradle_dependencies.txt; then
              echo "$PACKAGE" >> found_in_dependencies.txt
            fi
            if grep -q "$PACKAGE" gradle_build_env.txt; then
              echo "$PACKAGE" >> found_in_build_env.txt
            fi
          done
      - name: Patch Vulnerable Dependencies
        run: |
          patch_gradle() {
            local GROUP=$1
            local ARTIFACT=$2
            local VERSION=$3
            
            # Verify that we have a version - if not, log error and skip
            if [ -z "$VERSION" ]; then
              echo "ERROR: No patched version found for ${GROUP}:${ARTIFACT}, skipping..."
              return 1
            fi
            
            local PATCH_LINE="force '${GROUP}:${ARTIFACT}:${VERSION}'"
            
            # Check if we already have a configurations.all block
            if grep -q "configurations.all[[:space:]]*{" build.gradle; then
              # If we have configurations.all, check if we have resolutionStrategy
              if grep -A 10 "configurations.all[[:space:]]*{" build.gradle | grep -q "resolutionStrategy[[:space:]]*{"; then
                # Check if the dependency already exists (with or without version)
                if grep -q "force[[:space:]]*'${GROUP}:${ARTIFACT}:" build.gradle; then
                  # Replace the existing line with the correct version
                  sed -i "s|force[[:space:]]*'${GROUP}:${ARTIFACT}:[^']*'|force '${GROUP}:${ARTIFACT}:${VERSION}'|g" build.gradle
                else
                  # If we have resolutionStrategy, add the force line inside it
                  awk -v patch="$PATCH_LINE" '
                    /resolutionStrategy[[:space:]]*{/ { print; in_block=1; next }
                    in_block && /^\s*}/ { print "        " patch; in_block=0 }
                    { print }
                  ' build.gradle > tmp && mv tmp build.gradle
                fi
              else
                # If we have configurations.all but no resolutionStrategy, add it
                awk -v patch="$PATCH_LINE" '
                  /configurations.all[[:space:]]*{/ {
                    print; print "    resolutionStrategy {"; print "        " patch; print "    }"; next
                  }
                  { print }
                ' build.gradle > tmp && mv tmp build.gradle
              fi
            else
              # If we don't have configurations.all, add it before the dependencies block
              awk -v patch="$PATCH_LINE" '
                /^dependencies[[:space:]]*{/ {
                  print "configurations.all {";
                  print "    resolutionStrategy {";
                  print "        " patch;
                  print "    }";
                  print "}";
                  print "";
                  print $0;
                  next;
                }
                { print }
              ' build.gradle > tmp && mv tmp build.gradle
            fi
          }
          
          if [ -f found_in_dependencies.txt ]; then
            while read -r package; do
              # Extract the patched version, with verification
              PATCHED_VERSION=$(jq -r "select(.securityVulnerability.package.name == \"$package\") | .securityVulnerability.firstPatchedVersion.identifier" vulnerabilities.json)
              if [ -z "$PATCHED_VERSION" ] || [ "$PATCHED_VERSION" == "null" ]; then
                echo "WARNING: No patched version found for $package"
                continue
              fi
              
              GROUP=$(echo "$package" | cut -d':' -f1)
              ARTIFACT=$(echo "$package" | cut -d':' -f2)
              echo "Patching ${GROUP}:${ARTIFACT} to version ${PATCHED_VERSION}"
              patch_gradle "$GROUP" "$ARTIFACT" "$PATCHED_VERSION"
            done < found_in_dependencies.txt
          fi
          
          if [ -f found_in_build_env.txt ]; then
            while read -r package; do
              # Extract the patched version, with verification
              PATCHED_VERSION=$(jq -r "select(.securityVulnerability.package.name == \"$package\") | .securityVulnerability.firstPatchedVersion.identifier" vulnerabilities.json)
              if [ -z "$PATCHED_VERSION" ] || [ "$PATCHED_VERSION" == "null" ]; then
                echo "WARNING: No patched version found for $package"
                continue
              fi
              
              GROUP=$(echo "$package" | cut -d':' -f1)
              ARTIFACT=$(echo "$package" | cut -d':' -f2)
              echo "Patching ${GROUP}:${ARTIFACT} to version ${PATCHED_VERSION}"
              patch_gradle "$GROUP" "$ARTIFACT" "$PATCHED_VERSION"
            done < found_in_build_env.txt
          fi
      
      - name: Show Final build.gradle
        run: cat build.gradle
